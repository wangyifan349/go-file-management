from flask import Flask,request,jsonify,send_from_directory,abort;import os;from werkzeug.utils import secure_filename;application=Flask(__name__);ROOT_STORAGE=os.path.join(os.path.dirname(__file__),'storage');os.makedirs(ROOT_STORAGE,exist_ok=True);def resolve_full_path(relative_path):absolute_path=os.path.normpath(os.path.join(ROOT_STORAGE,relative_path));(abort(400,'Invalid path') if not absolute_path.startswith(os.path.abspath(ROOT_STORAGE)) else None);return absolute_path;@application.route('/') 
def render_user_interface():return "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Flask File Management Tool</title><style>body{font-family:Arial,sans-serif;margin:20px;}#fileTree ul{list-style:none;padding-left:20px;}#fileTree li{margin:2px 0;cursor:pointer;}#fileTree .directory{font-weight:bold;}#fileTree .file{}#fileTree .dragOver{background:#def!important;}.contextMenu{position:absolute;background:#fff;border:1px solid #ccc;display:none;z-index:1000;}.contextMenu li{padding:5px 10px;white-space:nowrap;}.contextMenu li:hover{background:#eee;}</style></head><body><h1>Flask File Management Tool</h1><form id='uploadForm'><input type='file' name='uploadFile'><button type='submit'>Upload to Current Directory</button></form><p>Current Directory: <span id='currentDirectoryDisplay'>/</span></p><div id='fileTree'></div><ul id='contextMenu' class='contextMenu'><li data-action='download'>Download</li><li data-action='delete'>Delete</li><li data-action='rename'>Rename</li></ul><script>let currentDirectory='';let contextMenuTarget=null;function refreshDirectory(path=''){currentDirectory=path;document.getElementById('currentDirectoryDisplay').innerText='/'+path;fetch('/api/list?path='+encodeURIComponent(path)).then(r=>r.json()).then(d=>buildFileTree(d.entries));}function buildFileTree(entries){const container=document.getElementById('fileTree');container.innerHTML='';const list=document.createElement('ul');entries.forEach(entry=>{const item=document.createElement('li');item.innerText=entry.name;item.dataset.name=entry.name;item.dataset.isDirectory=entry.isDirectory;item.className=entry.isDirectory?'directory':'file';item.draggable=true;item.onclick=()=>{if(entry.isDirectory){let newPath=currentDirectory?currentDirectory+'/'+entry.name:entry.name;refreshDirectory(newPath)}};item.addEventListener('dragstart',e=>e.dataTransfer.setData('text/plain',currentDirectory?currentDirectory+'/'+entry.name:entry.name));item.addEventListener('dragover',e=>{if(entry.isDirectory){e.preventDefault();item.classList.add('dragOver')}});item.addEventListener('dragleave',()=>item.classList.remove('dragOver'));item.addEventListener('drop',e=>{e.preventDefault();item.classList.remove('dragOver');const source=e.dataTransfer.getData('text/plain');const destination=currentDirectory?currentDirectory+'/'+entry.name:entry.name;fetch('/api/move',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({sourcePath:source,destinationDirectory:destination})}).then(()=>refreshDirectory(currentDirectory))});item.oncontextmenu=e=>{e.preventDefault();contextMenuTarget=item;const menu=document.getElementById('contextMenu');menu.style.top=e.pageY+'px';menu.style.left=e.pageX+'px';menu.style.display='block'};list.appendChild(item)});container.appendChild(list)}document.getElementById('uploadForm').onsubmit=e=>{e.preventDefault();const fileInput=document.querySelector('input[name=uploadFile]');if(!fileInput.files.length)return;const formData=new FormData();formData.append('uploadFile',fileInput.files[0]);formData.append('path',currentDirectory);fetch('/api/upload',{method:'POST',body:formData}).then(()=>refreshDirectory(currentDirectory))};document.addEventListener('click',()=>document.getElementById('contextMenu').style.display='none');document.querySelectorAll('#contextMenu li').forEach(menuItem=>menuItem.onclick=()=>{const action=menuItem.dataset.action;const name=contextMenuTarget.dataset.name;const isDirectory=contextMenuTarget.dataset.isDirectory==='true';const fullPath=currentDirectory?currentDirectory+'/'+name:name;if(action==='download'){if(isDirectory){alert('Cannot download a directory.')}else{window.location='/api/download?path='+encodeURIComponent(fullPath)}}if(action==='delete'){if(confirm('Delete '+name+'?'))fetch('/api/delete',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({path:fullPath})}).then(()=>refreshDirectory(currentDirectory))}if(action==='rename'){const newName=prompt('Enter new name:',name);if(newName&&newName!==name)fetch('/api/rename',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({oldPath:fullPath,newName:newName})}).then(()=>refreshDirectory(currentDirectory))}document.getElementById('contextMenu').style.display='none'});refreshDirectory();</script></body></html>";@application.route('/api/list') 
def list_entries():path=request.args.get('path','');full=resolve_full_path(path);return jsonify(entries=[{'name':entry,'isDirectory':os.path.isdir(os.path.join(full,entry))} for entry in os.listdir(full)]);@application.route('/api/upload',methods=['POST']) 
def upload_file():path=request.form.get('path','');directory=resolve_full_path(path);upload=request.files.get('uploadFile');(abort(400,'No file provided') if not upload else None);filename=secure_filename(upload.filename);upload.save(os.path.join(directory,filename));return jsonify(success=True);@application.route('/api/delete',methods=['POST']) 
def delete_entry():data=request.get_json();path=data.get('path','');target=resolve_full_path(path);os.rmdir(target) if os.path.isdir(target) else os.remove(target);return jsonify(success=True);@application.route('/api/rename',methods=['POST']) 
def rename_entry():data=request.get_json();old=data.get('oldPath','');newName=data.get('newName','');oldFull=resolve_full_path(old);parentDir=os.path.dirname(oldFull);newFull=os.path.join(parentDir,secure_filename(newName));os.rename(oldFull,newFull);return jsonify(success=True);@application.route('/api/move',methods=['POST']) 
def move_entry():data=request.get_json();source=data.get('sourcePath','');destination=data.get('destinationDirectory','');sourceFull=resolve_full_path(source);destFull=resolve_full_path(destination);newFull=os.path.join(destFull,os.path.basename(sourceFull));os.rename(sourceFull,newFull);return jsonify(success=True);@application.route('/api/download') 
def download_entry():path=request.args.get('path','');full=resolve_full_path(path);(abort(404) if not os.path.isfile(full) else None);directory=os.path.dirname(full);filename=os.path.basename(full);return send_from_directory(directory,filename,as_attachment=True);if __name__=='__main__':application.run(debug=True)
